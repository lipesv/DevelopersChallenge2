// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OFX.Data.Context;

namespace OFX.Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20211220111441_dbDevelopersChallenge")]
    partial class dbDevelopersChallenge
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("OFX.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("StatementTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StatementTransactionId")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("OFX.Domain.Entities.StatementTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext");

                    b.Property<string>("Memo")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Posted")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("UId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("StatementTransaction");
                });

            modelBuilder.Entity("OFX.Domain.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<Guid>("StatementTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StatementTransactionId")
                        .IsUnique();

                    b.ToTable("Status");
                });

            modelBuilder.Entity("OFX.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("OFX.Domain.Entities.Account", b =>
                {
                    b.HasOne("OFX.Domain.Entities.StatementTransaction", "StatementTransaction")
                        .WithOne("Account")
                        .HasForeignKey("OFX.Domain.Entities.Account", "StatementTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatementTransaction");
                });

            modelBuilder.Entity("OFX.Domain.Entities.StatementTransaction", b =>
                {
                    b.HasOne("OFX.Domain.Entities.Transaction", "Transaction")
                        .WithMany("Statements")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("OFX.Domain.Entities.Status", b =>
                {
                    b.HasOne("OFX.Domain.Entities.StatementTransaction", "StatementTransaction")
                        .WithOne("Status")
                        .HasForeignKey("OFX.Domain.Entities.Status", "StatementTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatementTransaction");
                });

            modelBuilder.Entity("OFX.Domain.Entities.StatementTransaction", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("OFX.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("Statements");
                });
#pragma warning restore 612, 618
        }
    }
}
